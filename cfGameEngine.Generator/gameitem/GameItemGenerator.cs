using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace cfGameEngine.Generator;

[Generator(LanguageNames.CSharp)]
public class GameItemGenerator : IIncrementalGenerator
{
    private const string AttributeMetadataName = "cfGameEngine.GameItem.GameItemAttribute";

    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        var marked = context.SyntaxProvider.ForAttributeWithMetadataName(
            AttributeMetadataName,
            predicate: static (node, _) => node is ClassDeclarationSyntax,
            transform: static (ctx, _) =>
            {
                var typeSymbol = (INamedTypeSymbol)ctx.TargetSymbol;
                var attribute = ctx.Attributes[0];

                var itemName = attribute.ConstructorArguments.Length > 0
                    ? attribute.ConstructorArguments[0].Value as string ?? string.Empty
                    : string.Empty;

                var decodeMethod = attribute.ConstructorArguments.Length > 1
                    ? attribute.ConstructorArguments[1].Value as string ?? string.Empty
                    : string.Empty;

                return new ItemInfo { Type = typeSymbol, ItemName = itemName, DecodeMethod = decodeMethod };
            });

        var all = marked.Collect();

        context.RegisterSourceOutput(all, (productCtx, items) =>
        {
            var lines = new List<string>();

            foreach (var item in items)
            {
                if (string.IsNullOrWhiteSpace(item.ItemName) || string.IsNullOrWhiteSpace(item.DecodeMethod))
                {
                    productCtx.ReportDiagnostic(Diagnostic.Create(
                        Descriptors.BadAttributeArgs,
                        item.Type.Locations.FirstOrDefault(),
                        item.Type.ToDisplayString()
                    ));
                    continue;
                }

                var method = item.Type
                    .GetMembers(item.DecodeMethod)
                    .OfType<IMethodSymbol>()
                    .FirstOrDefault(m => m.IsStatic && m.DeclaredAccessibility == Accessibility.Public);

                if (method == null)
                {
                    productCtx.ReportDiagnostic(Diagnostic.Create(
                        Descriptors.MissingMethod,
                        item.Type.Locations.FirstOrDefault(),
                        item.Type.ToDisplayString(),
                        item.DecodeMethod
                    ));
                    continue;
                }

                var fqType = item.Type.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat);
                var escaped = item.ItemName.Replace("\"", "\\\"");
                lines.Add($"GameItemFactory.Register(\"{escaped}\", {fqType}.{item.DecodeMethod});");
            }

            var sb = new StringBuilder();
            sb.AppendLine("// <auto-generated />")
                .AppendLine("using System.Runtime.CompilerServices;")
                .AppendLine("namespace cfGameEngine.GameItem")
                .AppendLine("{")
                .AppendLine("    internal static class __GameItem_AutoRegister")
                .AppendLine("    {")
                .AppendLine("        [ModuleInitializer]")
                .AppendLine("        internal static void Register()")
                .AppendLine("        {");

            foreach (var line in lines) 
                sb.AppendLine("            " + line);

            sb.AppendLine("        }")
                .AppendLine("    }")
                .AppendLine("}");

            productCtx.AddSource("__GameItem_AutoRegister.generated.cs", sb.ToString());
        });
    }

    private struct ItemInfo
    {
        public INamedTypeSymbol Type;
        public string ItemName;
        public string DecodeMethod;
    }

    private static class Descriptors
    {
        public static readonly DiagnosticDescriptor MissingMethod = new(
            id: "CFG001",
            title: "Decode method not found",
            messageFormat: "Type '{0}' does not contain a public static method named '{1}'",
            category: "cfGameEngine.GameItem",
            defaultSeverity: DiagnosticSeverity.Error,
            isEnabledByDefault: true);

        public static readonly DiagnosticDescriptor BadAttributeArgs = new(
            id: "CFG003",
            title: "Invalid [GameItem] arguments",
            messageFormat: "Type '{0}' has invalid or empty GameItem attribute arguments",
            category: "cfGameEngine.GameItem",
            defaultSeverity: DiagnosticSeverity.Error,
            isEnabledByDefault: true);
    }
}